<?php
require_once 'PHPUnit/Framework.php';

require_once 'FluentDom.php';

/**
 * Test class for FluentDom.
 * Generated by PHPUnit on 2009-05-30 at 23:45:31.
 */
class FluentDomTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    FluentDom
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
      $this->doc = new DOMDocument();
      $this->doc->preserveWhiteSpace = FALSE;
      $this->doc->formatOutput = TRUE;
      $this->doc->load('tests/sources/test.xml');

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown(){
    }

    /**
     * Cones the current DOMDocument and creates a FluentDOM object
     *
     * @access protected
     * @return FluentDOM
     */
    protected function getNewFluentDoc() {
      $newDoc = clone $this->doc;
      return new FluentDOM($newDoc);
    }

    // iterator tests
    /**
     * Testcase for rewind
     * @access public
     */
    public function _testIteratorRewind() {

    }

    // test on fluent interface

    // traversing
    /**
     * Testcase for 'find'
     * @access public
     */
    public function testFind() {
      $out = $this->getNewFluentDoc()->find('//foo');

      $this->assertTrue($out instanceof FluentDOM);
      $this->assertEquals($out->length, 1);
      $this->assertEquals($out->item(0)->nodeName, 'foo');
    }

    /**
     * Testcase for 'find'
     * @access public
     */
    public function testFindByFind() {
      $out = $this->getNewFluentDoc()
             ->find('/test')
             ->find('foo');

      $this->assertTrue($out instanceof FluentDOM);
      $this->assertEquals($out->length, 1);
      $this->assertEquals($out->item(0)->nodeName, 'foo');
    }

    public function testEq() {
      $out = $this->getNewFluentDoc()
        ->find('//bar')
        ->eq(3);

      $this->assertTrue($out instanceof FluentDOM);

    }

    /**
     * Testcase for add
     *
     * The method 'add' shall append the given expression to the current FluentDOM.
     * In this case XML is passed as the expression.
     *
     * @access public
     */
    public function testAddXPath() {
      $org = $this->getNewFluentDoc();
      $out = $this->getNewFluentDoc()
             ->find('/test')
             ->add('foo');

      $this->assertTrue($out instanceof FluentDOM);
      $this->assertEquals($out->length, 2);
    }

    /**
     * Testcase for andSelf()
     * @access public
     */
    public function _testAndSelf() {
      $out = $this->getNewFluentDoc()
             ->find('/test')
             ->find('foo')
             ->andSelf();

      $this->assertTrue($out instanceof FluentDOM);
      $this->assertEquals($out->length, 2);
    }

    /**
     * Testcase for append
     * @access public
     */
    public function testAppendXML() {
      $out = $this->getNewFluentDoc()->append('<test>inside</test>');

      $this->assertTrue($out instanceof FluentDOM);

    }


    public function testFilter() {
      $out = $this->getNewFluentDoc()
             ->filter('//foo');

      $this->assertTrue($out instanceof FluentDOM);

    }
}
?>